use fmt
use { serve get } from net.http
use { parse_int } form strings

@(get "/:name")
fn greeting req {
  let name (dig req {:params :name})

  @map {
    :name name
    :message (fmt.format "Hello, %s" name)
  }
}

(serve { :port 3000 })

# task: calculate sum, ignoring every string that's not a number
@list
input: { "1" "2" "3" "four" "" "-4a" }

# solution 1:
(sum (map unwrap (keep is_some (map parse_int input))))

# map - takes a function to apply to elements of the list
# unwrap - unwraps option, panics if no value is present (none)
# keep - filters values from a collection, keeping those that satisfy the predicate function
# is_some - returns true if the value is present (some)
# parse_int - tries to parse a string into an int, returning an option of int

{ "1" "2" "3" "four" "" "-4a" }
  | (map parse_int)
  | (keep is_some)
  | (map unwrap)
  | sum

# the pipe takes the left hand side value and passes it to the
# right hand side function; the function should take a single value
# and return a single value to be piped to the next function;
# the pipe operator is left-associative, meaning (value | fn1) | fn2 <=> value | fn1 | fn2

# (g (f x)) is the same as (g * f x)
(println * greeter name)
(println (greeter name))

(sum * (map unwrap) * (keep is_some) * (map parse_int) { "1" "2" "3" "four" "" "-4a" })

# this is also valid
{ "1" "2" "3" "four" "" "-4a" } | sum * (map unwrap) * (keep is_some) * (map parse_int)


# With comptime you can create runtime function definitions:

@compiler
fn def_multiply identifier multiplier {
  # some code here to create AST node for a function definition...
}

@(def_multiply 2)
mul_by_two
# creates:
fn mul_by_two value: (mul value 2)

@(def_multiply 42)
mul_by_forty_two
# creates:
fn mul_by_forty_two value: (mul value 42)


# This is an example of an html document in raiton collection representation:
let page {
  :head {
    :meta {}
  }
  :body {
    :h1 "Hello, world"
    :input (attributes {
      :id "name"
      :type "name"
      :placeholder "Enter your name..."
    })
  }
}

(render page) # produces html

